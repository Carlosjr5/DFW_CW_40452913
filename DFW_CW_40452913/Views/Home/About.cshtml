@{
    var isAdmin = User.IsInRole("admin");
    @model List<DFW_CW_40452913.Data.Petition>

}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="style.css">
    @if (isAdmin)
    {
        // <h1>Hi Admin!</h1>
    }
    else
    {
        @* <h1>Welcome back!,</h1>
    <h2>Here all the current iPétitions!</h2> *@
    }
</head>

<body>
    <allmain aria-labelledby="title">
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search petitions...">
            <button onclick="searchPetitions()">Search</button>
        </div>

        <div class="allpetition-details">
            <div id="petitionsList">
                @foreach (var petition in Model)
                {
                    <div class="petition-item">
                        <div class="Image">
                            <img src="@petition.ImageUrl" alt="Petition Image" class="petition-image" />
                        </div>
                        <div class="PetitionTitle">
                            <a href="/Home/About#@petition.Id">@petition.Title</a>
                        </div>
                        <div class="Description">@Html.Raw(petition.Description)</div>
                        <div class="interactions">
                            <!-- Like Button -->
                            <button class="LikeButton" data-petition-id="@petition.Id">Like</button>

                            <!-- Share Button -->
                            <button class="ShareButton" onclick="sharePetition('@petition.Title')">Share</button>

                            <!-- Comment Form -->
                            <form class="CommentForm" data-petition-id="@petition.Id">
                                <input type="text" placeholder="Leave a comment..." name="commentText" />
                                <button type="submit">Comment</button>
                            </form>
                        </div>
                        @if (isAdmin)
                        {
                            <button class="DeleteButton">Delete</button>
                        }
                    </div>
                }
            </div>
        </div>
    </allmain>

    <script>
        //Check for admin.
        var isAdmin = @isAdmin.ToString().ToLower();

        document.addEventListener('DOMContentLoaded', function () {
            // Function to set a cookie
            function setCookie(name, value, days) {
                var expires = "";
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + (value || "") + expires + "; path=/";
            }

            // Function to get a cookie
            function getCookie(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            }


            var petitionsList = document.getElementById('petitionsList');

            // Function to render petitions
            function renderPetitions(petitions) {
                petitionsList.innerHTML = ''; // Clear previous content

                petitions.forEach(petition => {
                    var petitionItem = document.createElement('div');
                    var petitionId = petition.Title.replace(/\s+/g, '-').toLowerCase(); // Generate ID from petition title
                    petitionItem.id = petitionId; // Set ID for the petition item
                    petitionItem.classList.add('petition-item');

                    var formattedDate = new Date(petition.DateCreated).toLocaleString();

                    petitionItem.innerHTML = `
                                        <div class="Image">
                                            <img src="${petition.ImageUrl}" alt="Petition Image" class="petition-image" />
                                        </div>
                                                 <small>Author: ${petition.Author}</small>
                                        <div class="PetitionTitle">
                                            <a href="/Home/About#${petitionId}">${petition.Title}</a> <!-- Link to petition item using ID with tagging -->
                                        </div>
                                        <div class="Description">${petition.Description}</div>
                                        <div class="VoteYes">
                                            <button class="YesButton">${hasVoted ? 'Voted' : 'Vote'}</button>
                                            <div class="Counter">${hasVoted ? '1' : '0'}</div>
                                        </div>
                                         <button class="ShareButton">Share</button>
                                         <button class="CommentButton">Comment</button>
                                         ${isAdmin ? `<button class="DeleteButton">Delete</button>` : ''}
                                    `;

                    petitionsList.appendChild(petitionItem);

                    // Add event listener to vote button if the user has not already voted
                    if (!hasVoted) {
                        var yesButton = petitionItem.querySelector('.YesButton');
                        yesButton.addEventListener('click', function () {
                            var counter = this.nextElementSibling;
                            var count = parseInt(counter.textContent) + 1;
                            counter.textContent = count;
                            setCookie('voted', 'true', 365); // Set cookie to indicate that the user has voted
                            this.textContent = 'Voted'; // Change button text to indicate that the user has voted
                            this.disabled = true; // Disable the button after voting
                        });
                    }

                    // Add event listener to delete button if the user is an admin
                    if (isAdmin) {
                        var deleteButton = petitionItem.querySelector('.DeleteButton');
                        deleteButton.addEventListener('click', function () {
                            petitionItem.remove();
                        });
                    }
                });
            }

            // Function to search petitions
            function searchPetitions() {
                var searchInput = document.getElementById('searchInput').value.toLowerCase();
                var filteredPetitions = samplePetitions.filter(petition =>
                    petition.Title.toLowerCase().includes(searchInput) || petition.Description.toLowerCase().includes(searchInput)
                );
                renderPetitions(filteredPetitions);
            }

            // Initial render
            var hasVoted = getCookie('voted');
            renderPetitions(samplePetitions);

            // Listen for Enter key press event in search input
            document.getElementById('searchInput').addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    searchPetitions();
                }
            });
        });


        // Example function for the Share button
        function sharePetition(title) {
            alert(`Share this petition: ${title}`);
            // Implement sharing logic here, could be linking to social media platforms, etc.
        }

        document.querySelectorAll('.LikeButton').forEach(button => {
            button.addEventListener('click', function () {
                // Find the parent petition item of this button
                var petitionItem = this.closest('.petition-item');

                // Get the petition title from within this petition item
                var petitionTitle = petitionItem.querySelector('.PetitionTitle').textContent;

                // Implement your AJAX call here to increment the like count in the database
                alert(`Liked petition: ${petitionTitle}`);
                // After successful AJAX call, update the likes count displayed
            });
        });


        // Handle comment form submission
        document.querySelectorAll('.CommentForm').forEach(form => {
            form.addEventListener('submit', function (event) {
                event.preventDefault();
                const petitionId = this.getAttribute('data-petition-id');
                const commentText = this.querySelector('[name="commentText"]').value;
                // Implement your AJAX call here to post the comment to the server
                alert(`Comment on petition ${petitionId}: ${commentText}`);
                // Clear the comment input field after submission
                this.querySelector('[name="commentText"]').value = '';
            });
        });
    </script>



</body>
<footer class="apfooter">
    &copy; 2024 - iPétition - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
</footer>

</html>