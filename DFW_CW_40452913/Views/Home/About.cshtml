@model Tuple<List<DFW_CW_40452913.Data.Petition>, List<DFW_CW_40452913.Data.Comment>>

@{
    var isAdmin = User.IsInRole("admin");
    var isUser = User.IsInRole("user");
}

@if (TempData["Message"] != null)
{
    <script>alert("@TempData["Message"]");</script>
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="style.css">
    @if (isAdmin)
    {
        // <h1>Hi Admin!</h1>
    }
    else
    {
        @* <h1>Welcome back!,</h1>
    <h2>Here all the current iPétitions!</h2> *@
    }
</head>

<body>
    @Html.AntiForgeryToken()
    <allmain aria-labelledby="title">
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search petitions...">
            <button onclick="searchPetitions()">Search</button>
        </div>

        <form id="voteForm" style="display:none;">
            @Html.AntiForgeryToken()
        </form>

        <div class="allpetition-details">
            <div id="petitionsList">
                @foreach (var petition in Model.Item1)
                {
                    <div class="petition-item" id="@petition.Id">

                        @if (!string.IsNullOrEmpty(petition.ImageUrl))
                        {
                            <div class="Image">
                                <img src="@Url.Content(petition.ImageUrl)" alt="Petition Image" class="petition-image" />
                            </div>
                        }
                        <div class="PetitionTitle">
                            <span>@petition.Title</span>
                        </div>
                        <div class="Description">
                            @Html.Raw(petition.Description.Replace("\n", "<br>"))
                        </div>

                        <br />
                        <div>
                            @if (isAdmin || isUser)
                            {
                                <button class="voteButton" data-petition-id="@petition.Id" onclick="handleVote(@petition.Id)">Vote</button>   
                                <br />
                                <span id="voteCount-@petition.Id"><strong>Petition Voted by @petition.Votes Users!</strong></span>
                            }else{
                                <span id="voteCount-@petition.Id"><strong>Petition Voted by @petition.Votes Users!</strong></span>
                                <br />
                                <small >
                                <a class="text-muted" class="nav-link Home" asp-area="" asp-controller="Home" asp-action="Login">Login to Vote & Create Petitions!</a>
                                </small>
                            }
                        </div>
                        <br />
                        <br />
                        <div>
                            <button class="ShareButton" data-petition-id="@petition.Id">Share</button>
                            @if (isAdmin)
                            {
                                <button type="button" onclick="deletePetition(@petition.Id)" style="background-color: red; color: white;">Delete Petition</button>
                            }
                        </div>
                   

                        <br />

                        @{
                            var petitionComments = Model.Item2.Where(c => c.PetitionId == petition.Id).ToList();
                        }
                        <button class="toggleCommentsButton">Show Comments</button>

                        <div class="commentsSection">
                            <form action="AddComment" method="post">
                                <input type="hidden" name="petitionId" value="@petition.Id" />
                                <input type="text" placeholder="Leave a comment..." name="commentText" />
                                <button type="submit">Comment</button>
                            </form>

                            @* Filter comments for the current petition. *@

                            @if (petitionComments.Any())
                            {
                                foreach (var comment in petitionComments)
                                {
                                    <div class="comment">
                                        <p>@comment.Text</p>
                                        <small>Posted on @comment.DatePosted.ToString("dd MMM yyyy")</small>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        </div>


        <div id="shareModal" style="display:none;">
            <button id="facebookShare" class="social-share-button" style="background-image: url('/images/facebook_logo.png');"></button>
            <button id="XShare" class="social-share-button" style="background-image: url('/images/x_logo.png');"></button>
            <br /><br />
            <input type="text" id="shareLink" readonly>
            <button onclick="copyToClipboard()">Copy Link</button>
            <br /><br />
            <button onclick="closeModal()">Close</button>
        </div>



    </allmain>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


    @*Petition Panel Section*@
    <script>
        //Check for admin.
        var isAdmin = @isAdmin.ToString().ToLower();

        document.addEventListener('DOMContentLoaded', function () {

            var petitionsList = document.getElementById('petitionsList');
            // Function to render petitions
            function renderPetitions(petitions) {
                petitionsList.innerHTML = ''; // Clear previous content

                petitions.forEach(petition => {
                    var petitionItem = document.createElement('div');
                    var petitionId = petition.Title.replace(/\s+/g, '-').toLowerCase(); // Generate ID from petition title
                    petitionItem.id = petitionId; // Set ID for the petition item
                    petitionItem.classList.add('petition-item');

                    // Construct comments HTML
                    let commentsHtml = '';
                    if (petition.Comments && petition.Comments.length > 0) {
                        commentsHtml = '<div class="commentsSection" style="display:none;">';
                        petition.Comments.forEach(comment => {
                            commentsHtml += `
                                    <div class="comment">
                                        <p>${comment.Text}</p>
                                        <small>Posted on ${new Date(comment.DatePosted).toLocaleDateString()}</small>
                                    </div>
                                `;
                        });
                        commentsHtml += `
                                <form class="CommentForm" data-petition-id="${petition.Id}">
                                    <input type="text" placeholder="Leave a comment..." name="commentText" />
                                    <button type="submit">Comment</button>
                                </form>
                            </div>`;
                    }

                    petitionItem.innerHTML = `
                        <div class="Image">
                            <img src="${petition.ImageUrl}" alt="Petition Image" class="petition-image" />
                        </div>
                        <div class="PetitionTitle">
                            <span class="Title">${petition.Title}</span>
                        </div>
                        <div class="Description">${petition.Description.replace(/\n/g, "<br>")}</div>
                        <div class="interactions">
                            <button class="voteButton" data-petition-id="${petition.Id}">Sign Petition</button>
                            <span id="voteCount-${petition.Id}">Votes: ${petition.Votes}</span>
                            <button class="ShareButton">Share</button>
                            ${isAdmin ? `<button class="DeleteButton" data-petition-id="${petition.Id}">Delete</button>` : ''}
                            <button class="toggleCommentsButton">Show Comments</button>
                            <form id="deletePetitionForm-${petition.Id}" style="display: none;" method="post">
                                <input type="hidden" name="id" value="${petition.Id}" />
                                <button type="button" onclick="deletePetition(${petition.Id})">Confirm Delete</button>
                            </form>
                        </div>
                        <div>
                            <button class="toggleCommentsButton">Show Comments</button>
                            ${commentsHtml}
                        </div>
                    `;


                    // Append petitionItem to the container
                    petitionsList.appendChild(petitionItem);

                
                
                });
            }

            // Call the renderPetitions function with the initial data
            renderPetitions(initialPetitionsData);
        });
    </script>


    <script>
        function deletePetition(petitionId) {
            fetch(`/Home/DeletePetition?id=${petitionId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert('Petition deleted successfully.');
                        // Reload the page or redirect
                        window.location.href = '/'; // Assuming '/' is the path to the Index view
                    } else {
                        alert('Error deleting petition.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete petition.');
                });
        }


    </script>

    @*Comment Section*@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle comment form submission
            document.querySelectorAll('.CommentForm').forEach(form => {
                form.addEventListener('submit', function (event) {
                    event.preventDefault();
                    const petitionId = this.getAttribute('data-petition-id');
                    const commentText = this.querySelector('[name="commentText"]').value;
                    alert(`Comment on petition ${petitionId}: ${commentText}`);
                    this.querySelector('[name="commentText"]').value = '';
                });
            });

            // Toggle comments display
            $('.toggleCommentsButton').click(function () {
                var $commentsSection = $(this).next('.commentsSection');
                $commentsSection.toggle(); // Toggle the visibility of the comments section
                $(this).text($commentsSection.is(':visible') ? 'Hide Comments' : 'Show Comments');
            });
        });
    </script>


    @*Share Section*@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Event delegation for handling clicks on dynamically added Share buttons
            document.addEventListener('click', function (event) {
                if (event.target && event.target.className.includes('ShareButton')) {
                    // Simulate generating a share link based on the petition's data
                    const petitionId = event.target.getAttribute('data-petition-id');
                    const petitionLink = `https://localhost:7284/Home/About/${petitionId}`;
                    showShareModal(petitionLink);
                }
            });

            function showShareModal(link) {
                document.getElementById('shareLink').value = link; // Set the link in the modal
                document.getElementById('shareModal').style.display = 'block'; // Show the modal
            }

            // Set up social media sharing links
            document.getElementById('facebookShare').addEventListener('click', function () {
                const url = document.getElementById('shareLink').value;
                window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
            });

            document.getElementById('XShare').addEventListener('click', function () {
                const url = document.getElementById('shareLink').value;
                window.open(`https://X.com/intent/tweet?url=${encodeURIComponent(url)}`, '_blank');
            });

            // Copy to clipboard function
            window.copyToClipboard = function () {
                const copyText = document.getElementById('shareLink');
                copyText.select();
                document.execCommand('copy');
                alert('Link copied to clipboard');
            };

            // Close modal function
            window.closeModal = function () {
                document.getElementById('shareModal').style.display = 'none';
            };
        });
    </script>

    @*Vote Section*@
    <script>
        function setCookie(name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/";
        }

        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }


        function handleVote(petitionId) {
            var hasVotedCookie = getCookie('voted-' + petitionId);
            if (hasVotedCookie) {
              //  alert('You have already voted for this petition.');
                return; // Stop the function if the cookie is found
            }

            fetch('/Home/Vote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ id: petitionId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Thank you for your vote!');
                        var voteCountSpan = document.getElementById('voteCount-' + petitionId);
                        voteCountSpan.textContent = 'Votes: ' + data.votes;
                        setCookie('voted-' + petitionId, 'true', 365); // Set a cookie to prevent further votes
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to process vote.');
                });
        }


  
                        
   </script>

 
</body>
<footer class="apfooter">
    &copy; 2024 - iPétition - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
</footer>

</html>
