@model Tuple<List<DFW_CW_40452913.Data.Petition>, List<DFW_CW_40452913.Data.Comment>>

@{
    var isAdmin = User.IsInRole("admin");
}

@if (TempData["Message"] != null)
{
    <script>alert("@TempData["Message"]");</script>
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="style.css">
    @if (isAdmin)
    {
        // <h1>Hi Admin!</h1>
    }
    else
    {
        @* <h1>Welcome back!,</h1>
    <h2>Here all the current iPétitions!</h2> *@
    }
</head>

<body>
    <allmain aria-labelledby="title">
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search petitions...">
            <button onclick="searchPetitions()">Search</button>
        </div>

        <div class="allpetition-details">
            <div id="petitionsList">
                @foreach (var petition in Model.Item1)
                {
                    <div class="petition-item" id="@petition.Id">

                        @if (!string.IsNullOrEmpty(petition.ImageUrl))
                        {
                            <div class="Image">
                                <img src="@Url.Content(petition.ImageUrl)" alt="Petition Image" class="petition-image" />
                            </div>
                        }
                        <div class="PetitionTitle">
                            <span>@petition.Title</span>
                        </div>
                        <div class="Description">
                            @Html.Raw(petition.Description.Replace("\n", "<br>"))
                        </div>

                        <br />
                        <div>
                            <button class="LikeButton" data-petition-id="@petition.Id">Like</button>

                            <button class="ShareButton" onclick="sharePetition('@petition.Title')">Share</button>
                        </div>

                        <br />
                        <form action="AddComment" method="post">
                            <input type="hidden" name="petitionId" value="@petition.Id" />
                            <input type="text" placeholder="Leave a comment..." name="commentText" />
                            <button type="submit">Comment</button>
                        </form>

                        @{
                            var petitionComments = Model.Item2.Where(c => c.PetitionId == petition.Id).ToList();

                        }
                        <button class="toggleCommentsButton">Show Comments</button>

                        <div class="commentsSection">
                            @* Filter comments for the current petition. *@

                            @if (petitionComments.Any())
                            {
                                foreach (var comment in petitionComments)
                                {
                                    <div class="comment">
                                        <p>@comment.Text</p>
                                        <small>Posted on @comment.DatePosted.ToString("dd MMM yyyy")</small>
                                    </div>
                                }
                            }

                        </div>
                        @if (isAdmin)
                        {
                            <button class="DeleteButton" data-petition-id="@petition.Id">Delete</button>
                        }
                    </div>
                }
            </div>
        </div>

    </allmain>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        //Check for admin.
        var isAdmin = @isAdmin.ToString().ToLower();



        document.addEventListener('DOMContentLoaded', function () {
            // Function to set a cookie
            function setCookie(name, value, days) {
                var expires = "";
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + (value || "") + expires + "; path=/";
            }

            // Function to get a cookie
            function getCookie(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            }


            var petitionsList = document.getElementById('petitionsList');

            // Function to render petitions
            function renderPetitions(petitions) {
                petitionsList.innerHTML = ''; // Clear previous content

                petitions.forEach(petition => {
                    var petitionItem = document.createElement('div');
                    var petitionId = petition.Title.replace(/\s+/g, '-').toLowerCase(); // Generate ID from petition title
                    petitionItem.id = petitionId; // Set ID for the petition item
                    petitionItem.classList.add('petition-item');

                    //  var formattedDate = new Date(petition.DateCreated).toLocaleString();

                    // Example of iterating over petitions and their comments
                    petitions.forEach(petition => {
                        var petitionItem = document.createElement('div');
                        petitionItem.classList.add('petition-item');

                        // Construct comments HTML
                        let commentsHtml = '';
                        if (petition.Comments && petition.Comments.length > 0) {
                            commentsHtml = '<div class="commentsSection" style="display:none;">';
                            petition.Comments.forEach(comment => {
                                commentsHtml += `
                                            <div class="comment">
                                                <p>${comment.Text}</p>
                                                <small>Posted on ${new Date(comment.DatePosted).toLocaleDateString()}</small>
                                            </div>
                                        `;
                            });
                            commentsHtml += `
                                    <form class="CommentForm" data-petition-id="${petition.Id}">
                                            <input type="text" placeholder="Leave a comment..." name="commentText" />
                                            <button type="submit">Comment</button>
                                     </form>
                                    </div>`;
                        }

                        // Include the commentsHtml in your petitionItem.innerHTML
                        petitionItem.innerHTML = `
                                    <div class="Image">
                                        <img src="${petition.ImageUrl}" alt="Petition Image" class="petition-image" />
                                    </div>
                                    <div class="PetitionTitle">
                                        <span class="Title">${petition.Title}</span>
                                    </div>
                                    <div class="Description">${petition.Description.replace(/\n/g, "<br>")}</div>
                                    <div class="interactions">
                                        <button class="LikeButton" data-petition-id="${petition.Id}">Like</button>
                                        <button class="ShareButton">Share</button>
                                        <button class="toggleCommentsButton">Show Comments</button>
                                    </div>
                                    <div>
                                    <button class="toggleCommentsButton">Show Comments</button>

                                    ${commentsHtml}
                                    </div>
                                `;

                        // Append petitionItem to the container
                        document.getElementById('petitionsList').appendChild(petitionItem);
                    });

                    // Add event listener to vote button if the user has not already voted
                    if (!hasVoted) {
                        var yesButton = petitionItem.querySelector('.YesButton');
                        yesButton.addEventListener('click', function () {
                            var counter = this.nextElementSibling;
                            var count = parseInt(counter.textContent) + 1;
                            counter.textContent = count;
                            setCookie('voted', 'true', 365); // Set cookie to indicate that the user has voted
                            this.textContent = 'Voted'; // Change button text to indicate that the user has voted
                            this.disabled = true; // Disable the button after voting
                        });
                    }

                    // Add event listener to delete button if the user is an admin
                    if (isAdmin) {
                        var deleteButton = petitionItem.querySelector('.DeleteButton');
                        deleteButton.addEventListener('click', function () {
                            petitionItem.remove();
                        });
                    }
                });
            }

            // Function to search petitions
            function searchPetitions() {
                var searchInput = document.getElementById('searchInput').value.toLowerCase();
                var filteredPetitions = samplePetitions.filter(petition =>
                    petition.Title.toLowerCase().includes(searchInput) || petition.Description.toLowerCase().includes(searchInput)
                );
                renderPetitions(filteredPetitions);
            }

            // Initial render
            var hasVoted = getCookie('voted');
            renderPetitions(samplePetitions);

            // Listen for Enter key press event in search input
            document.getElementById('searchInput').addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    searchPetitions();
                }
            });



            // Example function for the Share button
            function sharePetition(title) {
                alert(`Share this petition: ${title}`);
            }

            // Attaching event listener to the common parent element
            document.getElementById('petitionsList').addEventListener('click', function (event) {
                // Checking if the clicked element is a Like button
                if (event.target.classList.contains('LikeButton')) {
                    const button = event.target;
                    const petitionId = button.getAttribute('data-petition-id');

                    // Check if the user has already voted for this petition using cookies
                    if (getCookie('voted_' + petitionId)) {
                        button.disabled = true; // Optionally disable the button
                        alert('You have already liked this petition.');
                        return; // Exit if already voted
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/Home/IncrementVote', // Adjust the URL as necessary
                        data: { petitionId: petitionId },
                        success: function (data) {
                            if (data.success) {
                                button.textContent = 'Like (' + data.votes + ')';
                                // Mark that the user has voted for this petition
                                setCookie('voted_' + petitionId, 'true', 365);
                                button.disabled = true; // Optionally disable the button after voting
                            } else {
                                alert('Error updating the vote: ' + data.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('Error updating the vote. Please try again later.');
                        }
                    });
                }
            });



            // Handle comment form submission
            document.querySelectorAll('.CommentForm').forEach(form => {
                form.addEventListener('submit', function (event) {
                    event.preventDefault();
                    const petitionId = this.getAttribute('data-petition-id');
                    const commentText = this.querySelector('[name="commentText"]').value;
                    alert(`Comment on petition ${petitionId}: ${commentText}`);
                    this.querySelector('[name="commentText"]').value = '';
                });
            });







        });



        // Toggle comments display
        $('.toggleCommentsButton').click(function () {
            var $commentsSection = $(this).next('.commentsSection');
            $commentsSection.toggle(); // Toggle the visibility of the comments section
            $(this).text($commentsSection.is(':visible') ? 'Hide Comments' : 'Show Comments');
        });

    </script>



</body>
<footer class="apfooter">
    &copy; 2024 - iPétition - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
</footer>

</html>